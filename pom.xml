<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>inf6.promed</groupId>
	<artifactId>prototype-pom</artifactId>
	<version>0.3-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>DEUS root pom</name>


	<modules>
		<module>deus</module>
		<module>dacus</module>
	</modules>

	<properties>
		<spring.version>2.5.6.A</spring.version>
		<aspectj.version>1.6.1</aspectj.version>
		<spring.agent.version>2.5.6</spring.agent.version>
		<spring.osgi.version>1.1.2.B</spring.osgi.version>
		<application.traceLevels>*=warn,deus.*=verbose,dacus.*=verbose</application.traceLevels>
	</properties>


	<developers>
		<developer>
			<id>cpn</id>
			<name>Christoph Neumann</name>
			<email>christoph.neumann@informatik.uni-erlangen.de</email>
			<url>http://www6.informatik.uni-erlangen.de/people/cpn/</url>
			<organization>Uni Erlangen - Informatik 6</organization>
			<organizationUrl>http://www6.informatik.uni-erlangen.de/</organizationUrl>
		</developer>
		<developer>
			<id>siflramp</id>
			<name>Florian Rampp</name>
			<email>Florian.Rampp@informatik.stud.uni-erlangen.de</email>
			<organization>Uni Erlangen - Informatik 6</organization>
			<organizationUrl>http://www6.informatik.uni-erlangen.de/</organizationUrl>
		</developer>
	</developers>

	<scm>
		<connection>scm:svn:https://svn.origo.ethz.ch/dacus/tags/dacus-0.2</connection>
		<developerConnection>scm:svn:https://svn.origo.ethz.ch/dacus/tags/dacus-0.2</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<issueManagement>
		<system>Redmine</system>
		<url>faui6p15.informatik.uni-erlangen.de:3000</url>
	</issueManagement>

	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--+++ DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<dependencyManagement>
	
		<dependencies>
		
			<!--+++ INTRA-PROJECT DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-access-storage-api</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-access-storage-inmemory</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-access-storage-hibernate</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-access-transfer-core</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-access-transfer-common</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-access-transfer-plugins-local</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-access-transfer-plugins-xmpp</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-puddle</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-soul-barker</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
	
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-soul-accountadmin</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
	
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-core-soul-gatekeeper</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>deus-model</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
	
	
	
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>dacus-core-puddle</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
			
			<dependency>
				<groupId>inf6.promed</groupId>
				<artifactId>dacus-ui-puddle</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>
	
			<!--+++ INTER-PROJECT DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	
			<!--+++ SPRING +++-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>org.springframework.context</artifactId>
				<version>${spring.version}</version>
				<scope>provided</scope>
			</dependency>
			
				
			<dependency>
				<groupId>org.springframework.osgi</groupId>
				<artifactId>org.springframework.osgi-library</artifactId>
				<version>${spring.osgi.version}</version>
				<type>libd</type>
				<scope>provided</scope>
			</dependency>
	
			
			
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>org.springframework.aspects</artifactId>
				<version>${spring.version}</version>
			</dependency>
	
			<!-- this is only a test scoped dependency, since Spring DM server provides spring-agent.jar! -->
			<!-- Additionally, the surefire plugin needs to be configured to pass -javaagent:<PATH-TO-spring.jar> as command line argument to java.exe -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-agent</artifactId>
				<version>${spring.agent.version}</version>
				<scope>test</scope>
			</dependency>

	
			<!--+++ ASPECTJ +++-->
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>com.springsource.org.aspectj.weaver</artifactId>
				<version>${aspectj.version}</version>
				<scope>provided</scope>
			</dependency>
			
		</dependencies>
	</dependencyManagement>



	<dependencies>
		<!--+++ INTRA-PROJECT DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

		<!--+++ INTER-PROJECT DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.test</artifactId>
			<version>${spring.version}</version>
			<scope>test</scope>
		</dependency>

		<!--+++ JUNIT +++-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.4</version>
			<scope>test</scope>
		</dependency>

	
		<!--+++ LOGGING +++-->
		<!-- Logback ist used as logging backend! -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>com.springsource.ch.qos.logback.classic</artifactId>
			<version>0.9.9</version>
			<!-- TODO: why test?? maybe it should be "provided" -->
			<scope>test</scope>
		</dependency>
		
<!--			 this is actually a transitive dependency (since it is a dep. of logback.classic), but-->
<!--				we want it to appear, when executing mvn dependency:copy-dependencies -->
<!--		<dependency>-->
<!--			<groupId>ch.qos.logback</groupId>-->
<!--			<artifactId>com.springsource.ch.qos.logback.core</artifactId>-->
<!--			<version>0.9.9</version>-->
<!--		</dependency>-->
		
		
		<!-- We use the slf4j api, against which logback is programmed -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>com.springsource.slf4j.api</artifactId>
			<version>1.5.0</version>
		</dependency>
		<!-- for libraries using apache commons logging: make loggers use the slf4j api -->
<!--		<dependency>-->
<!--			<groupId>org.slf4j</groupId>-->
<!--			<artifactId>com.springsource.slf4j.org.apache.commons.logging</artifactId>-->
<!--			<version>1.5.0</version>-->
<!--		</dependency>-->
		<!-- for libraries using java.util.logging: make JUL loggers use the slf4j api ("JUL to SLF4J bridge")-->
<!--		<dependency>-->
<!--			<groupId>org.slf4j</groupId>-->
<!--			<artifactId>com.springsource.slf4j.bridge</artifactId>-->
<!--			<version>1.5.6</version>-->
<!--		</dependency>-->
		<!-- for libraries using log4j directly: make loggers use the slf4j api	("SLF4J Log4j Over SLF4J Binding") -->
<!--		<dependency>-->
<!--			<groupId>org.slf4j</groupId>-->
<!--			<artifactId>com.springsource.slf4j.org.apache.log4j</artifactId>-->
<!--			<version>1.5.0</version>-->
<!--			<scope>provided</scope>-->
<!--		</dependency>-->

	</dependencies>



	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--+++ BUILD +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<build>

		<!--+++ PLUGINS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

		<plugins>

			<!--<plugin>
				<groupId>com.springsource.bundlor</groupId>
				<artifactId>com.springsource.bundlor.maven</artifactId>
				<version>1.0.0.M2</version>
				<executions>
					<execution>
						<id>bundlor</id>
						<goals>
							<goal>transform</goal>
						</goals>
					</execution>
				</executions>
			</plugin>-->



			<!-- MAVEN PROJECT FILE GENERATION -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<wtpversion>2.0</wtpversion>
					<additionalProjectFacets>
						<com.springsource.server.bundle>1.0</com.springsource.server.bundle>
					</additionalProjectFacets>
					<additionalBuildcommands>
						<buildcommand>org.eclipse.wst.common.project.facet.core.builder</buildcommand>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
						<projectnature>org.eclipse.wst.common.project.facet.core.nature</projectnature>
						<projectnature>com.springsource.server.ide.facet.core.bundlenature</projectnature>
					</additionalProjectnatures>
					<!-- added this, so that automatically, the spring dm server is the default runtime! -->
					<additionalConfig>
						<file>
							<name>.settings/org.eclipse.wst.common.project.facet.core.xml</name>
							<content>
								<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<faceted-project>
	<runtime name="SpringSource dm Server (Runtime) v1.0" />
	<installed facet="com.springsource.server.bundle" version="1.0" />
</faceted-project>
								]]>
							</content>
						</file>
					</additionalConfig>
					<classpathContainers>
						<classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER</classpathContainer>
						<classpathContainer>com.springsource.server.ide.jdt.core.MANIFEST_CLASSPATH_CONTAINER</classpathContainer>
					</classpathContainers>
				</configuration>
			</plugin>


			<!-- BUNDLE MANIFEST GENERATION -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>1.4.3</version>
				<extensions>true</extensions>
				<configuration>
					<!-- The following instructions are delegated to the BND tool of Peter Kriens
					- Options with capital letter are directly inserted into Manifest as Headers
					- options starting with _ ...?
					 -->
					<instructions>
						<!--
							export all packages below the root package (except non exported packages), and don't reimport them! more on
							reimporting exported packages here: http://www.osgi.org/blog/2007/04/importance-of-exporting-nd-importing.html
							If this behaviour is desired, add ;-noimport:=true at the end!
						-->
						<Export-Package>${osgi.nonExportedPackages},${osgi.rootPackage}.*</Export-Package>

						<!--
							include all other packages (also the non exported packages!) as private. Export-Package takes precedence over
							Private-Package!
						-->
						<Private-Package>${osgi.rootPackage}.*;-split-package:=merge-first</Private-Package>

						<!-- remove the BND internal header, that just states, which packages are ignored by BND -->
						<_removeheaders>Ignore-Package</_removeheaders>

						<!-- add additional package imports -->
						<Import-Package>${osgi.additionalPackageImports},*</Import-Package>

						<!-- Spring DM server configuration for the level of trace output -->
						<Application-TraceLevels>${application.traceLevels}</Application-TraceLevels>
					</instructions>
				</configuration>
			</plugin>


			<!-- DEPENDENCY COPYING -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<!--	<outputDirectory>${springdmserver.location}/repository/bundles/usr</outputDirectory>-->
					<outputDirectory>${project.build.directory}/dependencies</outputDirectory>
					<overWriteReleases>false</overWriteReleases>
					<overWriteSnapshots>false</overWriteSnapshots>
					<overWriteIfNewer>true</overWriteIfNewer>
					<includeScope>runtime</includeScope>
					<!--	<includeTypes>jar</includeTypes>-->
				</configuration>
			</plugin>


			<!-- COMPILING -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<debug>true</debug>
				</configuration>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<includes>
						<include>**/*Test.java</include>
						<include>**/*TestCase.java</include>
					</includes>
				</configuration>
			</plugin>

			<!-- COPY ARTIFACT TO APP SERVER ON PHASE pre-integration-test -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.3</version>
				<executions>
					<execution>
						<phase>pre-integration-test</phase>
						<configuration>

							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
								
								<!-- copy the artifact only, if it is of 'bundle' packaging -->
								<if>
									<equals arg1="${project.packaging}" arg2="bundle" />
									<then>
										<!-- property springdmserver.location should be defined in ~/.m2/settings.xml -->
										<copy file="${project.build.directory}/${project.build.finalName}.jar" todir="${springdmserver.location}/pickup" />
									</then>
									<else>
										<echo message="this Maven project is not deployed to app server, since it is not of packaging 'bundle' but '${project.packaging}'" />
									</else>
								</if>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- <plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<configuration>
					<connectors>
						<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
							<port>9090</port>
							<maxIdleTime>60000</maxIdleTime>
						</connector>
					</connectors>
				</configuration>
			</plugin> -->

		</plugins>

		<!--+++ RESOURCES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
			</resource>
			<resource>
				<targetPath>META-INF/spring</targetPath>
				<filtering>false</filtering>
				<directory>${basedir}/src/main/spring</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<!--<testResource>
				<directory>${basedir}/src/test/resources</directory>
			</testResource>-->
			<testResource>
				<filtering>false</filtering>
				<directory>${basedir}/src/main/spring</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</testResource>
			<!-- this will potentially overwrite spring config from src/main/spring! -->
			<testResource>
				<filtering>false</filtering>
				<directory>${basedir}/src/test/spring</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</testResource>
		</testResources>

	</build>



	<!--+++ REPOSITORIES +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<repositories>
		<repository>
			<id>com.springsource.repository.bundles.release</id>
			<name>SpringSource Enterprise Bundle Repository - SpringSource Bundle Releases</name>
			<url>http://repository.springsource.com/maven/bundles/release</url>
		</repository>
		<repository>
			<id>com.springsource.repository.bundles.external</id>
			<name>SpringSource Enterprise Bundle Repository - External Bundle Releases</name>
			<url>http://repository.springsource.com/maven/bundles/external</url>
		</repository>
		<repository>
			<id>com.springsource.repository.libraries.release</id>
			<name>SpringSource Enterprise Bundle Repository - SpringSource Library Releases</name>
			<url>http://repository.springsource.com/maven/libraries/release</url>
		</repository>
		<repository>
			<id>com.springsource.repository.libraries.external</id>
			<name>SpringSource Enterprise Bundle Repository - External Library Releases</name>
			<url>http://repository.springsource.com/maven/libraries/external</url>
		</repository>
	</repositories>

</project>
