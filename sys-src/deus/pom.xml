<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>inf6.promed</groupId>
	<artifactId>deus</artifactId>
	<version>0.4-SNAPSHOT</version>

	<packaging>pom</packaging>
	<name>DEUS all</name>

	<modules>
		<module>core</module>
		<module>model</module>
		<module>nsi</module>
		<module>storage</module>

		<module>commontest</module>
	</modules>

	<!-- don't remove properties, even if they are empty!!! -->
	<properties>
		<spring.version>3.0.2.RELEASE</spring.version>
		<!--<spring.version>[3.0, 3.1)</spring.version> -->
		<aspectj.version>1.6.1</aspectj.version>
		<spring.instrument.version>3.0.1.RELEASE-A</spring.instrument.version>
		<!-- <spring.osgi.version>1.2.1</spring.osgi.version> -->
		<spring.osgi.version>[1.2, 1.3)</spring.osgi.version>

		<slf4j.version>1.5.6</slf4j.version>
		<!-- <slf4j.version>[1.5, 1.6)</slf4j.version> -->

		<junit.version>4.13.1</junit.version>
		<application.traceLevels>*=warn,deus.*=verbose,dacus.*=verbose</application.traceLevels>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>


		<!-- org.springframework.orm.jpa.support: this is needed for <context:component-scan 
			/>. This BeanPostProcessor requires PersistantAnnotationBeanPostProcessor 
			which is in the given package. -->
		<osgi.additionalPackageImports />
	</properties>


	<developers>
		<developer>
			<id>cpn</id>
			<name>Christoph Neumann</name>
			<email>christoph.neumann@informatik.uni-erlangen.de</email>
			<url>http://www6.informatik.uni-erlangen.de/people/cpn/</url>
			<organization>Uni Erlangen - Informatik 6</organization>
			<organizationUrl>http://www6.informatik.uni-erlangen.de/</organizationUrl>
		</developer>
		<developer>
			<id>siflramp</id>
			<name>Florian Rampp</name>
			<email>Florian.Rampp@informatik.stud.uni-erlangen.de</email>
			<organization>Uni Erlangen - Informatik 6</organization>
			<organizationUrl>http://www6.informatik.uni-erlangen.de/</organizationUrl>
		</developer>
	</developers>

	<scm>
		<connection>scm:svn:https://svn.origo.ethz.ch/dacus/src/trunk</connection>
		<developerConnection>scm:svn:https://svn.origo.ethz.ch/dacus/src/trunk</developerConnection>
	</scm>

	<issueManagement>
		<system>Origo</system>
		<url>http://dacus.origo.ethz.ch/issues</url>
	</issueManagement>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>2.0</version>
			</plugin>
		</plugins>
	</reporting>



	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!--+++ DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<dependencyManagement>

		<dependencies>

			<!--+++ INTRA-PROJECT DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-access-storage-api</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-access-storage-inmemory</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-access-transfer-core</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-access-transfer-common</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-access-transfer-plugins-xmpp</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-contribution</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-repatriationhub</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-pifgoverning</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-publication</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-subscription</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-difgoverning</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-hci</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-accountadmin</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>


			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-core-soul-gatekeeper</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>

			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>deus-model</artifactId>
				<version>${project.version}</version>
				<type>bundle</type>
			</dependency>


			<!--+++ INTER-PROJECT DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

			<!-- http://mvnrepository.com/ | http://ebr.springsource.com/repository/app/ -->

			<!--+++ SPRING +++ -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>org.springframework.context</artifactId>
				<version>${spring.version}</version>
				<!-- <scope>provided</scope> -->
			</dependency>


			<dependency>
				<groupId>org.springframework.osgi</groupId>
				<artifactId>org.springframework.osgi.web</artifactId>
				<version>${spring.osgi.version}</version>
				<scope>provided</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>org.springframework.aspects</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- this formerly was spring-agent.jar! -->
			<!-- this is only a test scoped dependency, since Spring DM server provides 
				spring-instrument.jar! -->
			<!-- Additionally, the surefire plugin needs to be configured to pass 
				-javaagent:<PATH-TO-spring-instrument.jar> as command line argument to java.exe -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>org.springframework.instrument</artifactId>
				<version>${spring.instrument.version}</version>
				<scope>test</scope>
			</dependency>


			<!--+++ ASPECTJ +++ -->
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>com.springsource.org.aspectj.weaver</artifactId>
				<version>${aspectj.version}</version>
				<scope>provided</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>



	<dependencies>
		<!--+++ INTRA-PROJECT DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

		<!--+++ INTER-PROJECT DEPENDENCIES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.test</artifactId>
			<version>${spring.version}</version>
			<scope>test</scope>
		</dependency>

		<!--+++ JUNIT +++ -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>


		<!--+++ EASY MOCK +++ -->
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>2.4</version>
			<scope>test</scope>
		</dependency>


		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymockclassextension</artifactId>
			<version>2.4</version>
			<scope>test</scope>
		</dependency>


		<!--+++ LOGGING +++ -->
		<!-- Logback ist used as logging backend! -->
		<!-- <dependency> -->
		<!-- <groupId>ch.qos.logback</groupId> -->
		<!-- <artifactId>com.springsource.ch.qos.logback.classic</artifactId> -->
		<!-- <version>0.9.9</version> -->
		<!-- <scope>runtime</scope> -->
		<!-- </dependency> -->

		<!-- Use slf4j simple for testing -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>${slf4j.version}</version>
			<scope>test</scope>
		</dependency>


		<!-- We use the slf4j api, against which logback is programmed -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>com.springsource.slf4j.api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<!-- for libraries using apache commons logging: make loggers use the slf4j 
			api -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>com.springsource.slf4j.org.apache.commons.logging</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- for libraries using java.util.logging: make JUL loggers use the slf4j 
			api ("JUL to SLF4J bridge") -->
		<!-- <dependency> -->
		<!-- <groupId>org.slf4j</groupId> -->
		<!-- <artifactId>com.springsource.slf4j.bridge</artifactId> -->
		<!-- <version>${slf4j.version}</version> -->
		<!-- </dependency> -->
		<!-- for libraries using log4j directly: make loggers use the slf4j api 
			("SLF4J Log4j Over SLF4J Binding") -->
		<!-- <dependency> -->
		<!-- <groupId>org.slf4j</groupId> -->
		<!-- <artifactId>com.springsource.slf4j.org.apache.log4j</artifactId> -->
		<!-- <version>${slf4j.version}</version> -->
		<!-- <scope>provided</scope> -->
		<!-- </dependency> -->


		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>


	</dependencies>


	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!--+++ BUILD +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<build>

		<!--+++ PLUGINS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

		<plugins>

			<!-- SPRING BUNDLOR FOR TRANSFORMATION OF JAR FILE TO OSGi BUNDLE -->
			<!-- <plugin> <groupId>com.springsource.bundlor</groupId> <artifactId>com.springsource.bundlor.maven</artifactId> 
				<version>1.0.0.M2</version> <executions> <execution> <id>bundlor</id> <goals> 
				<goal>transform</goal> </goals> <configuration> <failOnWarnings>true</failOnWarnings> 
				fail if Bundlor generates warnings. Default: true <manifestHeaders> <![CDATA[ 
				Bundle-ManifestVersion: 2 Bundle-SymbolicName: ${project.groupId}.${project.artifactId} 
				Bundle-Version: ${version} Bundle-Name: ${project.name} Application-TraceLevels: 
				${application.traceLevels} Import-Template: javax.*;version="0" ]]> </manifestHeaders> 
				</configuration> </execution> </executions> </plugin> -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<archive>
						<!-- add the generated manifest to the war -->
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>

			<!-- BUNDLE MANIFEST GENERATION -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.3.6</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<supportedProjectTypes>
						<supportedProjectType>bundle</supportedProjectType>
						<supportedProjectType>war</supportedProjectType>
					</supportedProjectTypes>

					<!-- The following instructions are delegated to the BND tool of Peter 
						Kriens - Options with capital letter are directly inserted into Manifest 
						as Headers - options starting with _ ...? -->
					<instructions>

						<!-- remove the BND internal header, that just states, which packages 
							are ignored by BND -->
						<_removeheaders>Ignore-Package</_removeheaders>

						<!-- add additional package imports -->
						<Import-Package>${osgi.additionalPackageImports},*</Import-Package>

					</instructions>
				</configuration>
			</plugin>


			<!-- DEPENDENCY COPYING -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<!-- <outputDirectory>${springdmserver.location}/repository/bundles/usr</outputDirectory> -->
					<outputDirectory>${project.build.directory}/dependencies</outputDirectory>
					<overWriteReleases>false</overWriteReleases>
					<overWriteSnapshots>false</overWriteSnapshots>
					<overWriteIfNewer>true</overWriteIfNewer>
					<includeScope>runtime</includeScope>
					<!-- <includeTypes>jar</includeTypes> -->
				</configuration>
			</plugin>


			<!-- COMPILING -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<debug>true</debug>
				</configuration>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.12</version>
				<configuration>
					<includes>
						<include>**/*Test.java</include>
						<include>**/*TestCase.java</include>
					</includes>
				</configuration>
			</plugin>

		</plugins>

		<!--+++ RESOURCES ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
			</resource>
			<!-- puts the spring configuration files from the normal configuration 
				into /META-INF/spring -->
			<resource>
				<targetPath>META-INF/spring</targetPath>
				<directory>${basedir}/src/main/spring</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<!--<testResource> <directory>${basedir}/src/test/resources</directory> 
				</testResource> -->

			<!-- puts the spring configuration files from the normal configuration 
				into the root classpath folder -->
			<testResource>
				<directory>${basedir}/src/main/spring</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</testResource>

			<!-- puts the spring configuration files from the test configuration into 
				the root classpath folder, overwrites the ones from the normal configuration!!! -->
			<testResource>
				<directory>${basedir}/src/test/spring</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</testResource>
		</testResources>

	</build>

	<repositories>
		<repository>
			<id>maven2</id>
			<url>http://repo1.maven.org/maven2</url>
		</repository>
		<repository>
			<id>com.springsource.repository.bundles.release</id>
			<name>SpringSource Enterprise Bundle Repository - SpringSource Bundle Releases</name>
			<url>http://repository.springsource.com/maven/bundles/release</url>
		</repository>
		<repository>
			<id>com.springsource.repository.bundles.external</id>
			<name>SpringSource Enterprise Bundle Repository - External Bundle Releases</name>
			<url>http://repository.springsource.com/maven/bundles/external</url>
		</repository>
		<repository>
    <id>com.springsource.repository.libraries.release</id>
    <name>SpringSource Enterprise Bundle Repository - SpringSource Library Releases</name>
    <url>http://repository.springsource.com/maven/libraries/release</url>
</repository>

<repository>
    <id>com.springsource.repository.libraries.external</id>
    <name>SpringSource Enterprise Bundle Repository - External Library Releases</name>
    <url>http://repository.springsource.com/maven/libraries/external</url>
</repository>
	</repositories>

</project>